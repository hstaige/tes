import os
import numpy as np
import pandas as pd
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore

floc = '/home/tim/research/tes/calibratedTES_Dec2022' # dir with photonlists
theory_csv = '/home/tim/research/tes/theory/Pr.csv' # generated by 'theory_to_csv.py'
full_theory_dat = '/home/tim/research/tes/theory/Pr_3e12/'
efficiency_curve_file = '/home/tim/research/tes/TES_Efficiency_Dec2022.csv'
ddest = '/home/tim/research/tes/line_id' # dir to save the various outputs

date = '202212'
day = '19'
runnum = '0000'
statelist = ['R']
minenergy = 780
maxenergy = 1900
binsize = 1

use_prev_fit = False
write_csv = False

sigma_guess = 2 # approx gaussian width [eV]
gamma_guess = .001 # approx gaussian width [eV]
up_bound_sigma = 10 # max gaussian width
up_bound_gamma = .001 # max lorentzian width
max_center_shift = 5 # distance the fitted line center can be from the data
max_amp_shift = np.inf # distance the fitted line amplitude can be from the data

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

bin_edges = np.arange(minenergy, maxenergy+binsize, binsize)
x = np.arange(minenergy, maxenergy+binsize, binsize/5)

file = f'{floc}/{date}{day}_{runnum}'
data = np.loadtxt(f'{file}_{statelist[0]}photonlist.csv', skiprows=1, delimiter=',')
if len(statelist)>1:
    for state in statelist[1:]:
        data = np.vstack((data,np.loadtxt(f'{file}_{statelist}photonlist.csv', skiprows=1, delimiter=',')))

def plot_th():
    th_spectra = os.listdir(full_theory_dat)
    theory_df = pd.read_csv(theory_csv)
    theory_df.drop(theory_df[(theory_df.Energy < minenergy) | (theory_df.Energy > maxenergy)].index, inplace=True)
    theory_df = theory_df.nlargest(10, 'Intensity').reset_index()

    theory = theory_df[['Energy','Intensity']].to_numpy()
    det_eff = np.loadtxt(efficiency_curve_file,delimiter=',',skiprows=1)
    eff_curve = interp1d(det_eff[:,0],det_eff[:,1],kind='cubic')

counts, _ = np.histogram(data, bins=bin_edges)
bin_centers = bin_edges[:-1]+binsize/2

def write_csv():
    out.columns = ['Center', 'Center_uncertainty', 'Amplitude', 'Amp_uncertainty', 'Sigma', 'Sigma_uncertainty']
    out = pd.merge(theory_df.sort_values(by=['Energy'], ignore_index=True), out.sort_values(by=['Center'], ignore_index=True), left_index=True, right_index=True)
    out = out[['Energy','Total_intesity','Charge','Lower_config','Lower_index','Lower_J','Upper_config','Upper_index','Upper_J','Intensity','Energy','Center', 'Center_uncertainty', 'Amplitude', 'Amp_uncertainty', 'Sigma', 'Sigma_uncertainty']]
    out.to_csv(f'{ddest}/linelist_{date}{day}_{runnum}_{statelist}.csv')

app = pg.mkQApp(f'{date}{day}_{runnum}_{statelist}')
#mw = QtWidgets.QMainWindow()
#mw.resize(800,800)

win = pg.GraphicsLayoutWidget(show=True, title=f'{date}{day}_{runnum}_{statelist}')
win.resize(1000,600)
win.setWindowTitle(f'{date}{day}_{runnum}_{statelist}')

# Enable antialiasing for prettier plots
pg.setConfigOptions(antialias=True)

p1 = win.addPlot(x=bin_centers, y=counts)

if __name__ == '__main__':
    pg.exec()
